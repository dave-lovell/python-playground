---
title: "Classes"
author: "Dave"
format: html
editor: visual
---

# Libraries

```{r librarise}
library(reticulate)
```

```{python setup}
import numpy as np
from warnings import warn
```

# Dice

Note the `_` prefix here for `_sides`. This indicates that this is a **protected attribute**. It doesn't change anything about the way the attribute is handled by Python, it's just a convention of the language. I'm getting the sense that conventions are much stronger in Python than in R.

If you double-underscore an attribute (e.g.) `__bias`, then that's a **private attribute**. Python quietly mangles the names of private attributes to make them harder to access, but otherwise they are the same as everything else.

```{python dice_class}
class Dice:
  
  def __init__(self, sides = 6):
    self._sides = sides
  
  def roll(self, times = 1, mod = 0):
    
    total = 0
    
    for throw in range(0, times):
      total += np.random.randint(1, self._sides)
    
    total += mod
    
    return(total)
    
  

d6 = Dice()
d20 = Dice(20)

d6.roll()
d20.roll()
d6.roll(2, mod = 2)
d20.roll(3)

```

### Attributes example

Python pastes `_[class]` to private attributes.

```{python attributes}
class Lich:
  
  creatureType = "undead"
  spellCaster = True
  
  def __init__(self, prepared_spells, phylactery_location):
    self._preparedSpells = prepared_spells
    self.__phylacteryLocation = phylactery_location
    
gragnought = Lich(prepared_spells = ["Detect life", "Speak with animals"], phylactery_location = "Under the sink")
  
gragnought.creatureType
gragnought._preparedSpells

try:
  gragnought.__phylacteryLocation
except AttributeError:
  print("There is no attribute with that name")
  
# Instead:
gragnought._Lich__phylacteryLocation
```
## Fate Characters

### Fate dice

```{python fate_dice}
import numpy as np
from warnings import warn

def fate_dice(mod = 0, n = 4):
  
  roll = 0
  
  for n_rll in range(1, n):
    roll += np.random.randint(-1, 2)
    
  return(roll + mod)

fate_dice()

class FateCharacter:
  
  name = ""
  skills = {"shoot": 0, "drive": 0, "rapport": 0, "brawl": 0}
  refresh = 3
  

  def __init__(self, name = name, refresh = refresh, skills = skills):
    
    self.name = name
    self.refresh = refresh
    self.skills = skills
  
  def roll(self, skill, mod = 0):
    
    if skill not in self.skills:
      warn(f"{self.name} has no '{skill}' skill, using default value of 0")
    
    return(fate_dice(mod = self.skills.get(skill, 0)) + mod)
  
  def set_skill(self, skill, value):
    self.skills[skill] = value
    
  def remove_skill(self, skill):
    del self.skills[skill]


hosea = FateCharacter("Hosea Ortiguez", skills = {"shoot":4, "rapport": 2, "ride":2, "dance":1})
  
hosea.roll("shoot")

hosea.set_skill("psionics", 1)

hosea.roll("psionics")

hosea.remove_skill("rapport")

hosea.roll("rapport")

  
```
